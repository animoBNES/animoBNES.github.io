# foamMooring
    git clone https://gitlab.com/hfchen20/foamMooring.git

## ksc
### nurion
#### KNL : cf. SKL is cpu only??

##### foamMooring
https://gitlab.com/hfchen20/foamMooring
https://doi.org/10.1016/j.apor.2022.103210

not working

make clean
module purge
module load intel/oneapi_21.3 impi/oneapi_21.3 cmake/3.26.2
module load craype-mic-knl fftw_mpi/3.3.7
source /apps/applications/OpenFOAM/v2212/intel/oneapi_21.2/impi/oneapi_21.2/mic-knl/OpenFOAM/OpenFOAM-v2212/etc/bashrc

##### MoorDyn
https://github.com/FloatingArrayDesign/MoorDyn

    thirdParty/MoorDyn_v1
        git -b master https://github.com/FloatingArrayDesign/MoorDyn.git
    thirdParty/MoorDyn
        git -b v2 https://github.com/FloatingArrayDesign/MoorDyn.git

##### map++
    https://bitbucket.org/mmasciola/map-plus-plus/src/master/
    https://map-plus-plus.readthedocs.io/en/latest/ref.html

##### moody
https://github.com/johannep/moodyAPI

        CCP-WSI repository: https://www.ccp-wsi.ac.uk
        OpenFOAM-v2012 (http://dx.doi.org/10.1007/s40722-022-00263-w)


#
module purge
module load craype-mic-knl
module load cmake/3.26.2 gcc/8.3.0 openmpi/3.1.0

        {MPI}
        'mvapich2/2.3.1' 'mvapich2/2.3.6' 'openmpi/3.1.0'

        {cpu_types}
        'craype-mic-knl' 'craype-x86-skylake'

        {libraries}
        'CDO/1.8.2' 'hdf4/4.2.13' 'hdf5/1.10.2' 'lapack/3.7.0' 'libxc/4.0.0' 'libxc/4.3.4' 'NCO/4.7.4' 'NCO/4.9.2' 'ncl/6.5.0' 'ncview/2.1.7' 'netcdf/4.6.1'


        'openmpi/3.1.0' supports the following modules

        {libraries_using_mpi}
        'fftw_mpi/2.1.5' 'fftw_mpi/3.3.7' 'hdf5-parallel/1.10.2' 'netcdf-hdf5-parallel/4.6.1' 'parallel-netcdf/1.10.0' 'pio/2.3.1'


cmake -DBUILD_TESTING=OFF -DEXTERNAL_EIGEN=OFF -DFORTRAN_WRAPPER=OFF -DMATLAB_WRAPPER=OFF -DPYTHON_WRAPPER=OFF -DUSE_VTK=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$FOAM_USER_LIBBIN/.. ../MoorDyn


module purge
module load craype-mic-knl fftw_mpi/3.3.7
module load intel/oneapi_21.3 impi/oneapi_21.3 cmake/3.26.2

make clean
module purge
module load craype-mic-knl fftw_mpi/3.3.7

module load intel/oneapi_21.3 impi/oneapi_21.3 cmake/3.26.2
source /apps/applications/OpenFOAM/v2212/intel/oneapi_21.2/impi/oneapi_21.2/mic-knl/OpenFOAM/OpenFOAM-v2212/etc/bashrc



source /apps/applications/OpenFOAM/v2212/intel/oneapi_21.2/impi/oneapi_21.2/mic-knl/OpenFOAM/OpenFOAM-v2212/etc/bashrc






# tutorial
/media/sbkim/1e4daf62-dd5b-4336-a492-353ab353a318/eun/foamMooring/tutorial/sixDoF_2D

deformMesh/
    run
overset/


# setup
cd ~/Work/docker
./openfoam-docker -default -data=/
./openfoam-docker -default -data=/media/sbkim/1e4daf62-dd5b-4336-a492-353ab353a318

cd /data/eun/
chmod 600 ~/.ssh/*

sudo apt update
sudo apt upgrade -y

sudo apt install -y libvtk9-dev
sudo apt install -y vtk9

sudo apt-get install -y git cmake liblapacke-dev libvtk9-dev
git clone https://gitlab.com/hfchen20/foamMooring.git
git pull

sudo apt install build-essential cmake cmake-curses-gui mesa-common-dev mesa-utils freeglut3-dev python3-dev python3-venv git-core ninja-build
sudo apt install graphviz* doxygen

cd /data/eun/
cd foamMooring/
./Allwmake

cd /data/eun/floating

https://bitbucket.org/mmasciola/map-plus-plus/src/master/

# glibc
## neuron: CentOS 7.9

$ module purge
$ module load gcc/8.3.0

$ tar -xvzf glibc-2.27.tar.gz
$ cd glibc-2.27
$ mkdir build
$ cd build

$ ../configure --prefix=[glibc 설치경로 - 소스 디렉터리와 다른 경로 설정]
$ make 2>&1 |tee make.log
$ make install
$ ls [glibc 설치경로]/lib |grep libm.so.6
libm.so.6 -> libm-2.27.so*

# conda
$ module load python/3.7.1
$ pip install --user --upgrade pip
    $ pip install --user PyWavelets
    or
    $ conda install PyWavelets

# apex
1. environment setup / conda setup
$ module purge
    x module load cuda/11.4 cmake/3.16.9 gcc/10.2.0 cudampi/openmpi-4.1.1 python/3.7.1
    module unload python/3.7.1
    module load cuda/11.4 cmake/3.16.9 gcc/10.2.0 cudampi/openmpi-4.1.1

$ . "/apps/applications/miniconda3/etc/profile.d/conda.sh"
$ conda init
$ which conda
/apps/applications/miniconda3/condabin/conda

2. conda setup
$ conda create -n gpt-neox python=3.9 --quiet --yes
$ conda activate gpt-neox

    cd /scratch/hpc103a01/Megatron-LM;
    mkdir apex;
    git clone https://github.com/NVIDIA/apex;
    cd apex;
    python setup.py install;
    cd ..;

3. package
$ conda install pytorch==1.13.1 torchvision==0.14.1 torchaudio==0.13.1 pytorch-cuda=11.7 -c pytorch -c nvidia -y
$ conda install cuda=11.7 -c nvidia -y
$ conda install packaging -c conda-forge -y

4. apex
$ git clone https://github.com/NVIDIA/apex
$ cd apex
$ python setup.py install
"python setup.py install --prefix=[conda 환경 내 lib/python3.9/site-packages 경로]"

5. check
$ conda list |grep apex
apex 0.1 pypi_0 pypi

# memory check for terminated job
$ qstat -xf 13567802 |grep mem
resources_used.mem = 642864384kb

#

1. environment for installation
    - nurion
    - os        : linux, CentOS 7.7
    - CPU       : Intel(R) Xeon(R) Gold 6126
    - compiler  : Intel 2019.5 Version
    - MPI       : IntelMPI 2019.5 Version
    - Intel MKL Math Library

2. before installation
$ module load intel/19.0.5 impi/19.0.5
