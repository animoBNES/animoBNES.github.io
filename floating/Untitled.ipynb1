{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "b62e83dc",
   "metadata": {},
   "source": [
    "# Wave"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b2301fa4",
   "metadata": {},
   "source": [
    "Saang Bum Kim <br>\n",
    "2023-08-15 07:27:16 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ec290fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d76de6a4",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e44636a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a7ddf06",
   "metadata": {},
   "outputs": [],
   "source": [
    "is_notebook = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "585fe7ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "is_notebook = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9b0de0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%writefile myfile.py\n",
    "is_notebook = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8b66226f",
   "metadata": {},
   "outputs": [],
   "source": [
    "!cat myfile.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c85049b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# from m_pre import *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70def63f",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    print('not in notebook !!!')\n",
    "else:\n",
    "    print('in notebook !!!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5c74cf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    print('import')\n",
    "    import pickle\n",
    "    import time\n",
    "    start = time.time()\n",
    "\n",
    "    import socket\n",
    "    if socket.gethostname() == 'neowindaria':\n",
    "        id_notebook = True\n",
    "    else:\n",
    "        id_notebook = False\n",
    "    print(f'Notebook: {id_notebook} @ {socket.gethostname()}')\n",
    "\n",
    "    import sys\n",
    "    sys.path.insert(0,\"/home/sbkim/Work/mypy/\")\n",
    "\n",
    "    import os\n",
    "    # os.chdir('/home/sbkim/Work/mypy/pwca/')\n",
    "    print(os.getcwd())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fcecd3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    import importlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1cb46246",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfe1c801",
   "metadata": {},
   "outputs": [],
   "source": [
    "# pip install xlrd\n",
    "# conda install -c anaconda xlrd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d52d91d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# if __name__ != \"__main__\":\n",
    "#     import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "210dd357",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    import matplotlib as mpl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32f48ac4",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70ed9a85",
   "metadata": {},
   "outputs": [],
   "source": [
    "# if __name__ == \"__main__\":\n",
    "if False:\n",
    "    from plotting import setup_text_plots\n",
    "    from plotting import golden\n",
    "    import plotting as sb_pl\n",
    "    importlib.reload(sb_pl)\n",
    "    sb_pl.f_pl()\n",
    "\n",
    "    from IPython.display import Image\n",
    "    from IPython.core.display import HTML\n",
    "    print(mpl.get_backend())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37538bd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    def get_cmap(n, name='hsv'):\n",
    "        '''Returns a function that maps each index in 0, 1, ..., n-1 to a distinct\n",
    "        RGB color; the keyword argument name must be a standard mpl colormap name.'''\n",
    "    #     return plt.cm.get_cmap(name, n)\n",
    "        return mpl.colormaps[name].resampled(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ea58ba4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %matplotlib inline\n",
    "\n",
    "# from plotting import setup_text_plots\n",
    "# setup_text_plots(fontsize=12, useSans=True)\n",
    "# setup_text_plots(fontsize=8, usetex=True)\n",
    "# setup_text_plots(fontsize=8, usetex=True, useSans=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4cb11bb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    def save_object(obj,ofile=\"data.pickle\"):\n",
    "        try:\n",
    "            with open(ofile, \"wb\") as f:\n",
    "                pickle.dump(obj, f, protocol=pickle.HIGHEST_PROTOCOL)\n",
    "        except Exception as ex:\n",
    "            print(\"Error during pickling object (Possibly unsupported):\", ex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ede0687",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    def load_object(filename = \"data.pickle\"):\n",
    "        try:\n",
    "            with open(filename, \"rb\") as f:\n",
    "                return pickle.load(f)\n",
    "        except Exception as ex:\n",
    "            print(\"Error during unpickling object (Possibly unsupported):\", ex)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bef621ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ != \"__main__\":\n",
    "    nons = lambda n: [[] for _ in range(n)]\n",
    "    nons_set = lambda n: [set() for _ in range(n)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc450c27",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import warnings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2512b4cd",
   "metadata": {},
   "source": [
    "# FINE"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.17"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "188.2px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
